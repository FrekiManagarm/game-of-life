{"ast":null,"code":"var _jsxFileName = \"/Users/mathieuchambaud/Documents/Perso-Projects/game-of-life/game-of-life-react/src/GameOfLife.js\";\nimport React from 'react';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TAILLE_CELLULE = 15;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\nclass Cell extends React.Component {\n  render() {\n    const {\n      x,\n      y\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Cell\",\n      style: {\n        left: `${TAILLE_CELLULE * x + 1}px`,\n        top: `${TAILLE_CELLULE * y + 1}px`,\n        width: `${TAILLE_CELLULE - 1}px`,\n        height: `${TAILLE_CELLULE - 1}px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cells: [],\n      isRunning: false,\n      interval: 100\n    };\n\n    this.handleClick = event => {\n      const elemOffset = this.getElementOffset();\n      const offsetX = event.clientX - elemOffset.x;\n      const offsetY = event.clientY - elemOffset.y;\n      const x = Math.floor(offsetX / TAILLE_CELLULE);\n      const y = Math.floor(offsetY / TAILLE_CELLULE);\n\n      if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n        this.board[y][x] = !this.board[y][x];\n      }\n\n      this.setState({\n        cells: this.makeCells()\n      });\n    };\n\n    this.runGame = () => {\n      this.setState({\n        isRunning: true\n      });\n      this.runIteration();\n    };\n\n    this.stopGame = () => {\n      this.setState({\n        isRunning: false\n      });\n\n      if (this.timeoutHandler) {\n        window.clearTimeout(this.timeoutHandler);\n        this.timeoutHandler = null;\n      }\n    };\n\n    this.handleIntervalChange = event => {\n      this.setState({\n        interval: event.target.value\n      });\n    };\n\n    this.handleClear = () => {\n      this.board = this.makeEmptyBoard();\n      this.setState({\n        cells: this.makeCells()\n      });\n    };\n\n    this.handleRandom = () => {\n      for (let y = 0; y < this.rows; y++) {\n        for (let x = 0; x < this.cols; x++) {\n          this.board[y][x] = Math.random() >= 0.5;\n        }\n      }\n\n      this.setState({\n        cells: this.makeCells()\n      });\n    };\n\n    this.rows = HEIGHT / TAILLE_CELLULE;\n    this.cols = WIDTH / TAILLE_CELLULE;\n    this.board = this.makeEmptyBoard();\n  }\n\n  makeEmptyBoard() {\n    let board = [];\n\n    for (let y = 0; y < this.rows; y++) {\n      board[y] = [];\n\n      for (let x = 0; x < this.cols; x++) {\n        board[y][x] = false;\n      }\n    }\n\n    return board;\n  }\n\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n\n  makeCells() {\n    let cells = [];\n\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.board[y][x]) {\n          cells.push({\n            x,\n            y\n          });\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  runIteration() {\n    let newBoard = this.makeEmptyBoard();\n\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        let neighbors = this.calculateNeighbors(this.board, x, y);\n\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newBoard[y][x] = true;\n          } else {\n            newBoard[y][x] = false;\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    this.board = newBoard;\n    this.setState({\n      cells: this.makeCells()\n    });\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runIteration();\n    }, this.state.interval);\n  }\n  /**\n   * Calculate the number of neighbors at point (x, y)\n   * @param {Array} board \n   * @param {int} x \n   * @param {int} y \n   */\n\n\n  calculateNeighbors(board, x, y) {\n    let neighbors = 0;\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\n    for (let i = 0; i < dirs.length; i++) {\n      const dir = dirs[i];\n      let y1 = y + dir[0];\n      let x1 = x + dir[1];\n\n      if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n        neighbors++;\n      }\n    }\n\n    return neighbors;\n  }\n\n  render() {\n    const {\n      cells,\n      isRunning\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board\",\n        style: {\n          width: WIDTH,\n          height: HEIGHT,\n          backgroundSize: `${TAILLE_CELLULE}px ${TAILLE_CELLULE}px`\n        },\n        onClick: this.handleClick,\n        ref: n => {\n          this.boardRef = n;\n        },\n        children: cells.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n          x: cell.x,\n          y: cell.y\n        }, `${cell.x},${cell.y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [\"Intervale des mise \\xE0 jour \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.interval,\n          onChange: this.handleIntervalChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 47\n        }, this), \" msec\", isRunning ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: this.stopGame,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: this.runGame,\n          children: \"Run\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: this.handleRandom,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: this.handleClear,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"names":["React","TAILLE_CELLULE","WIDTH","HEIGHT","Cell","Component","render","x","y","props","left","top","width","height","Game","constructor","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","n","map","cell"],"sources":["/Users/mathieuchambaud/Documents/Perso-Projects/game-of-life/game-of-life-react/src/GameOfLife.js"],"sourcesContent":["import React from 'react';\nimport './Game.css';\n\n\nconst TAILLE_CELLULE = 15;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\n\nclass Cell extends React.Component {\n\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div className=\"Cell\" style={{\n                left: `${TAILLE_CELLULE * x + 1}px`,\n                top: `${TAILLE_CELLULE * y + 1}px`,\n                width: `${TAILLE_CELLULE - 1}px`,\n                height: `${TAILLE_CELLULE - 1}px`,\n            }} />\n        );\n    }\n}\n\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n        this.rows = HEIGHT / TAILLE_CELLULE;\n        this.cols = WIDTH / TAILLE_CELLULE;\n\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        isRunning: false,\n        interval: 100,\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n\n        return board;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    handleClick = (event) => {\n\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        \n        const x = Math.floor(offsetX / TAILLE_CELLULE);\n        const y = Math.floor(offsetY / TAILLE_CELLULE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    render() {\n        const { cells, isRunning } = this.state;\n        return (\n            <div>\n                <div className=\"Board\"\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${TAILLE_CELLULE}px ${TAILLE_CELLULE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => { this.boardRef = n; }}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n                    ))}\n                </div>\n\n                <div className=\"controls\">\n                    Intervale des mise à jour <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec\n                    {isRunning ?\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module"}